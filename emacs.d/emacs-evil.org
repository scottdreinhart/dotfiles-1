#+TITLE:Emacs Evil Config
#+AUTHOR: Peng Li
#+EMAIL: seudut@gmail.com
 
As the =Evil= mode is significant, and has lots of configurations, it's better put them 
in a separate file.

* Evil mode 
https://www.emacswiki.org/emacs/Evil
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (defvar my-mode-list-to-use-emacs-as-insert '(emacs-lisp-mode org-mode eshell-mode lisp-interaction-mode))
  (defvar my-modes-use-emacs-init '(emacs-lisp-mode org-mode lisp-interaction-mode eshell-mode))

  (defun my-evil-config ()
    "This should be called after evil-mode is loaded."
    
    (setq evil-default-state 'normal)
    (dolist (mode my-modes-use-emacs-init) (evil-set-initial-state mode 'emacs))

    (advice-add 'evil-insert-state :after (lambda (&optional arg)
                                            (when (memq major-mode my-mode-list-to-use-emacs-as-insert)
                                              (evil-emacs-state))))
    
    (define-key evil-normal-state-map "\C-W s" 'evil-window-split)
    (define-key evil-normal-state-map "\C-W v" 'evil-window-vsplit)
    (define-key evil-normal-state-map "\C-h" 'evil-window-left)
    (define-key evil-normal-state-map "\C-j" 'evil-window-down)
    (define-key evil-normal-state-map "\C-k" 'evil-window-up)
    (define-key evil-normal-state-map "\C-l" 'evil-window-right)
    (define-key evil-normal-state-map (kbd "C->") (lambda () (interactive) (evil-window-increase-width 3)))
    (define-key evil-normal-state-map (kbd "C-<") (lambda () (interactive) (evil-window-decrease-width 3)))
    (define-key evil-normal-state-map (kbd "C-+") (lambda () (interactive) (evil-window-increase-height 3)))
    (define-key evil-normal-state-map (kbd "C--") (lambda () (interactive) (evil-window-decrease-height 3))))

  (use-package evil
    :ensure t
    :init
    ;; (setq evil-default-state 'emacs)
    (setq evil-emacs-state-cursor '("red" box))
    (setq evil-normal-state-cursor '("green" box))
    (setq evil-visual-state-cursor '("orange" box))
    (setq evil-insert-state-cursor '("red" bar))
    (setq evil-replace-state-cursor '("red" bar))
    (setq evil-operator-state-cursor '("red" hollow))
    :config
    (require 'evil-leader)
    (global-evil-leader-mode)
    (evil-mode t)
    ;; If alias insert state to emacs, there are some feature such as (column insert) not working.
    ;; so disable this alias. Instead, only swith to emacs state for some special mode by advicing `evil-insert-state'. see above
    ;; (defalias 'evil-inset-mode 'evil-emacs-state)

    ;; escape has two define, one is interpreted as M-, the other is interpreted as ESC. This may be different between emacs GUI
    ;; and terminal.
    ;; Here this setting make pressing ESC alone as exit to normal state, but keep when pressing ESC with combined key, as (M-*)
    (define-key evil-emacs-state-map [escape] 'evil-normal-state)
    ;; (define-key evil-emacs-state-map (kbd "<ESC>") 'evil-normal-state)
    (my-evil-config))
#+END_SRC

* Evil-escape
[[https://github.com/syl20bnr/evil-escape][evil-escape]], escape from anything with customizable key sequence.
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (use-package evil-escape
    :ensure t
    :init
    (setq-default evil-escape-delay 0.2)
    (setq-default evil-escape-key-sequence "jj")
    (setq-default evil-escape-excluded-states '(normal visual motion emacs))
    (setq-default evil-escape-excluded-major-modes '(emacs-lisp-mode org-mode))
    :config
    (evil-escape-mode))
#+END_SRC

* Evil-Leader
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader ";")
    ;; Buffer & File
    (evil-leader/set-key "f" 'ido-switch-buffer)
    (evil-leader/set-key "w" 'evil-save)
    (evil-leader/set-key "r" 'ivy-recentf)
    (evil-leader/set-key "w" 'save-buffer)
    (evil-leader/set-key "e" 'evil-edit)
    (evil-leader/set-key "o" 'ido-find-file)
    (evil-leader/set-key "p" 'projectile-find-file)
    ;; Window
    (evil-leader/set-key "s" 'evil-window-split)
    (evil-leader/set-key "v" 'evil-window-vsplit)
    (evil-leader/set-key "q" 'evil-quit)
    ;; others
    (evil-leader/set-key "h" 'help)
    (evil-leader/set-key "h" 'help))

#+END_SRC

* Evil-match
[[https://github.com/redguardtoo/evil-matchit]]
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (use-package evil-matchit
    :ensure t
    :config
    (global-evil-leader-mode 1))
#+END_SRC

* Evil-visualstar
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (use-package evil-visualstar
    :ensure t
    :init
    (setq evil-visualstar/persistent t)
    :config
    (global-evil-visualstar-mode))
#+END_SRC
* Provide 
#+BEGIN_SRC emacs-lisp :tangle yes :results silent
  (provide 'init-evil-mode)
#+END_SRC
